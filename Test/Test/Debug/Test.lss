
Test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000020  00800100  000001b6  0000024a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001b6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000006  00800120  00800120  0000026a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000026a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000029c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000088  00000000  00000000  000002dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000108d  00000000  00000000  00000364  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000deb  00000000  00000000  000013f1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000623  00000000  00000000  000021dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000f4  00000000  00000000  00002800  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005f0  00000000  00000000  000028f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000235  00000000  00000000  00002ee4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000058  00000000  00000000  00003119  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 66 00 	jmp	0xcc	; 0xcc <__ctors_end>
   4:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
   8:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
   c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  10:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  14:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  18:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  1c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  20:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  24:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  28:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  2c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  30:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  34:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  38:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  3c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  40:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  44:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  48:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  4c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  50:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  54:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  58:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  5c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  60:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  64:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  68:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  6c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  70:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  74:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  78:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  7c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  80:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  84:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  88:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  8c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  90:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  94:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  98:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  9c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  a0:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  a4:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  a8:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  ac:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  b0:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  b4:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  b8:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  bc:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  c0:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  c4:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  c8:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>

000000cc <__ctors_end>:
  cc:	11 24       	eor	r1, r1
  ce:	1f be       	out	0x3f, r1	; 63
  d0:	cf ef       	ldi	r28, 0xFF	; 255
  d2:	d8 e0       	ldi	r29, 0x08	; 8
  d4:	de bf       	out	0x3e, r29	; 62
  d6:	cd bf       	out	0x3d, r28	; 61

000000d8 <__do_copy_data>:
  d8:	11 e0       	ldi	r17, 0x01	; 1
  da:	a0 e0       	ldi	r26, 0x00	; 0
  dc:	b1 e0       	ldi	r27, 0x01	; 1
  de:	e6 eb       	ldi	r30, 0xB6	; 182
  e0:	f1 e0       	ldi	r31, 0x01	; 1
  e2:	02 c0       	rjmp	.+4      	; 0xe8 <__do_copy_data+0x10>
  e4:	05 90       	lpm	r0, Z+
  e6:	0d 92       	st	X+, r0
  e8:	a0 32       	cpi	r26, 0x20	; 32
  ea:	b1 07       	cpc	r27, r17
  ec:	d9 f7       	brne	.-10     	; 0xe4 <__do_copy_data+0xc>

000000ee <__do_clear_bss>:
  ee:	21 e0       	ldi	r18, 0x01	; 1
  f0:	a0 e2       	ldi	r26, 0x20	; 32
  f2:	b1 e0       	ldi	r27, 0x01	; 1
  f4:	01 c0       	rjmp	.+2      	; 0xf8 <.do_clear_bss_start>

000000f6 <.do_clear_bss_loop>:
  f6:	1d 92       	st	X+, r1

000000f8 <.do_clear_bss_start>:
  f8:	a6 32       	cpi	r26, 0x26	; 38
  fa:	b2 07       	cpc	r27, r18
  fc:	e1 f7       	brne	.-8      	; 0xf6 <.do_clear_bss_loop>
  fe:	0e 94 af 00 	call	0x15e	; 0x15e <main>
 102:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <_exit>

00000106 <__bad_interrupt>:
 106:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000010a <USART_transmit>:

void  USART_putstring(char *string){
	for(; *string; ++string){
		USART_transmit(*string);
	}
}
 10a:	e0 ec       	ldi	r30, 0xC0	; 192
 10c:	f0 e0       	ldi	r31, 0x00	; 0
 10e:	90 81       	ld	r25, Z
 110:	95 ff       	sbrs	r25, 5
 112:	fd cf       	rjmp	.-6      	; 0x10e <USART_transmit+0x4>
 114:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 118:	08 95       	ret

0000011a <USART_TRANSMIT_printf>:
 11a:	cf 93       	push	r28
 11c:	c8 2f       	mov	r28, r24
 11e:	8a 30       	cpi	r24, 0x0A	; 10
 120:	19 f4       	brne	.+6      	; 0x128 <USART_TRANSMIT_printf+0xe>
 122:	8d e0       	ldi	r24, 0x0D	; 13
 124:	0e 94 85 00 	call	0x10a	; 0x10a <USART_transmit>
 128:	8c 2f       	mov	r24, r28
 12a:	0e 94 85 00 	call	0x10a	; 0x10a <USART_transmit>
 12e:	80 e0       	ldi	r24, 0x00	; 0
 130:	90 e0       	ldi	r25, 0x00	; 0
 132:	cf 91       	pop	r28
 134:	08 95       	ret

00000136 <USART_init>:
void USART_init(){
	// Calculate ubbr:
	unsigned int ubrr =(F_CPU / (16*DEBUG_BAUD))-1U;
	/*Set baud rate */
	UBRR0H = (unsigned char)(ubrr>>8);
 136:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
	UBRR0L = (unsigned char)ubrr;
 13a:	83 e3       	ldi	r24, 0x33	; 51
 13c:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
	/* Enable receiver and transmitter */
	UCSR0B = (1<<RXEN)|(1<<TXEN);
 140:	88 e1       	ldi	r24, 0x18	; 24
 142:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
	UCSR0C |= (1<<USBS)|(3<<UCSZ0);	/* Set frame format:  2stop bit, 8data*/
 146:	e2 ec       	ldi	r30, 0xC2	; 194
 148:	f0 e0       	ldi	r31, 0x00	; 0
 14a:	80 81       	ld	r24, Z
 14c:	8e 60       	ori	r24, 0x0E	; 14
 14e:	80 83       	st	Z, r24
	stdout = &mystdout;
 150:	80 e0       	ldi	r24, 0x00	; 0
 152:	91 e0       	ldi	r25, 0x01	; 1
 154:	90 93 23 01 	sts	0x0123, r25	; 0x800123 <__data_end+0x3>
 158:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <__data_end+0x2>
 15c:	08 95       	ret

0000015e <main>:

#include "xbee.h"
#include "util_functions.h"


int main(void){
 15e:	cf 93       	push	r28
 160:	df 93       	push	r29
 162:	cd b7       	in	r28, 0x3d	; 61
 164:	de b7       	in	r29, 0x3e	; 62
 166:	61 97       	sbiw	r28, 0x11	; 17
 168:	0f b6       	in	r0, 0x3f	; 63
 16a:	f8 94       	cli
 16c:	de bf       	out	0x3e, r29	; 62
 16e:	0f be       	out	0x3f, r0	; 63
 170:	cd bf       	out	0x3d, r28	; 61
	
	USART_init();
 172:	0e 94 9b 00 	call	0x136	; 0x136 <USART_init>
	char msg[] = "7E00040801494D60";
 176:	81 e1       	ldi	r24, 0x11	; 17
 178:	ee e0       	ldi	r30, 0x0E	; 14
 17a:	f1 e0       	ldi	r31, 0x01	; 1
 17c:	de 01       	movw	r26, r28
 17e:	11 96       	adiw	r26, 0x01	; 1
 180:	01 90       	ld	r0, Z+
 182:	0d 92       	st	X+, r0
 184:	8a 95       	dec	r24
 186:	e1 f7       	brne	.-8      	; 0x180 <main+0x22>
    while (1) 
    {
		XBEE_send_command(msg);
 188:	ce 01       	movw	r24, r28
 18a:	01 96       	adiw	r24, 0x01	; 1
 18c:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <XBEE_send_command>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 190:	2f ef       	ldi	r18, 0xFF	; 255
 192:	80 e7       	ldi	r24, 0x70	; 112
 194:	92 e0       	ldi	r25, 0x02	; 2
 196:	21 50       	subi	r18, 0x01	; 1
 198:	80 40       	sbci	r24, 0x00	; 0
 19a:	90 40       	sbci	r25, 0x00	; 0
 19c:	e1 f7       	brne	.-8      	; 0x196 <main+0x38>
 19e:	00 c0       	rjmp	.+0      	; 0x1a0 <main+0x42>
 1a0:	00 00       	nop
 1a2:	f2 cf       	rjmp	.-28     	; 0x188 <main+0x2a>

000001a4 <XBEE_send_command>:

void XBEE_send_command(char * str){
	int str_len = sizeof(str)/sizeof(str[0]);
	uint8_t cmd[str_len];
	for (int i = 0; i<str_len; i++){
		USART_transmit(cmd[i]);
 1a4:	80 e0       	ldi	r24, 0x00	; 0
 1a6:	0e 94 85 00 	call	0x10a	; 0x10a <USART_transmit>
 1aa:	80 e0       	ldi	r24, 0x00	; 0
 1ac:	0e 94 85 00 	call	0x10a	; 0x10a <USART_transmit>
 1b0:	08 95       	ret

000001b2 <_exit>:
 1b2:	f8 94       	cli

000001b4 <__stop_program>:
 1b4:	ff cf       	rjmp	.-2      	; 0x1b4 <__stop_program>
